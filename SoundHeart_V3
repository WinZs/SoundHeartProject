/*
Release note V3
Signal filté envoyé sur moteur vibrant 

*/


// Our Global Sample Rate, 5000hz
#define SAMPLEPERIODUS 200

// defines for setting and clearing register bits
#ifndef cbi
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#endif
#ifndef sbi
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))
#endif

#include <arduinoFFT.h>
/* release note V2
 *  convertisseur du signal en 5V sur pate OUT N°2 //
  ajout LED
 */
 
#define pinMotor 3 //pate sur laquelle est branche le moteur vibrant
#define pinBouton 7 // bouton a 1 si enclenché

int fichierson[4] = {"tony.wav", "breanna.wav", "ines.wav" , "kem.wav"};
int sensorValue;

byte i;

#include <SimpleSDAudio.h>
float voltage;
  
void setup() {
  Serial.begin(9600);
      // Set ADC to 77khz, max for 10bit
    sbi(ADCSRA,ADPS2);
    cbi(ADCSRA,ADPS1);
    cbi(ADCSRA,ADPS0);


  pinMode(pinMotor, OUTPUT);
  pinMode(pinBouton, INPUT);
  i = 3;

  SdPlay.setSDCSPin(4); // sd card cs pin

  if (!SdPlay.init(SSDA_MODE_FULLRATE | SSDA_MODE_MONO | SSDA_MODE_AUTOWORKER))
    { while(1); }

  if(!SdPlay.setFile(fichierson[i])) // music name file
    { while(1);}
}


// 20 - 200hz Single Pole Bandpass IIR Filter
float bassFilter(float sample) {
    static float xv[3] = {0,0,0}, yv[3] = {0,0,0};
    xv[0] = xv[1]; xv[1] = xv[2]; 
    xv[2] = sample / 9.1f;
    yv[0] = yv[1]; yv[1] = yv[2]; 
    yv[2] = (xv[2] - xv[0])
        + (-0.7960060012f * yv[0]) + (1.7903124146f * yv[1]);
    return yv[2];
}

// 10hz Single Pole Lowpass IIR Filter
float envelopeFilter(float sample) { //10hz low pass
    static float xv[2] = {0,0}, yv[2] = {0,0};
    xv[0] = xv[1]; 
    xv[1] = sample / 160.f;
    yv[0] = yv[1]; 
    yv[1] = (xv[0] + xv[1]) + (0.9875119299f * yv[0]);
    return yv[1];
}

// 1.7 - 3.0hz Single Pole Bandpass IIR Filter
float beatFilter(float sample) {
    static float xv[3] = {0,0,0}, yv[3] = {0,0,0};
    xv[0] = xv[1]; xv[1] = xv[2]; 
    xv[2] = sample / 7.015f;
    yv[0] = yv[1]; yv[1] = yv[2]; 
    yv[2] = (xv[2] - xv[0])
        + (-0.7169861741f * yv[0]) + (1.4453653501f * yv[1]);
    return yv[2];
}



void loop(void)
{

 
  SdPlay.play();
  while(!SdPlay.isStopped())
    {
     unsigned long time = micros(); // Used to track rate
    float sample, value, envelope, beat, thresh;
    unsigned char i;

    for(i = 0;;++i){
        // Read ADC and center so +-512
        sample = (float)analogRead(0)-503.f;

        // Filter only bass component
        value = bassFilter(sample);

        // Take signal amplitude and filter
        if(value < 0)value=-value;
        envelope = envelopeFilter(value);

        // Every 200 samples (25hz) filter the envelope 
        if(i == 200) {
                // Filter out repeating bass sounds 100 - 180bpm
                beat = beatFilter(envelope);

                // Threshold it based on potentiometer on AN1
                thresh = 0.02f * (float)analogRead(1);

                // If we are above threshold, light up LED
                if(beat > thresh) digitalWrite(3, HIGH);
                else digitalWrite(3, LOW);

                //Reset sample counter
                i = 0;
        }

        // Consume excess clock cycles, to keep at 5000 hz
        for(unsigned long up = time+SAMPLEPERIODUS; time > 20 && time < up; time = micros());
    }  




    
    Debug_info();
    }

 





}

    


void Debug_info(){
    int sensorValue = analogRead(A0);
        int Threshold = analogRead(A1);
    
  Serial.print("sensorValue : ");Serial.println(sensorValue);
   Serial.print("Threshold : ");Serial.println(Threshold);
 //  Serial.print("BOUTON = "); Serial.println(i);
  // Serial.print(SdPlay.isStopped());
  }
